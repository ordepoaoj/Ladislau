// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web20.Models;

namespace Web20.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210129161415_spCobranca")]
    partial class spCobranca
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Web20.Models.Aquisicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TipoAquisicao")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tipo_Aquisicao");

                    b.HasKey("Id");

                    b.ToTable("Aquisicao");
                });

            modelBuilder.Entity("Web20.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Web20.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Web20.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Web20.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Web20.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Web20.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Web20.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web20.Models.ContinenteEditor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NomeContinente")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nome_Continente");

                    b.HasKey("Id");

                    b.ToTable("Continente_Editor");
                });

            modelBuilder.Entity("Web20.Models.Editor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CodPais")
                        .HasColumnType("int")
                        .HasColumnName("Cod_Pais");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(750)
                        .IsUnicode(false)
                        .HasColumnType("varchar(750)");

                    b.Property<string>("NomeEditor")
                        .IsRequired()
                        .HasMaxLength(700)
                        .IsUnicode(false)
                        .HasColumnType("varchar(700)")
                        .HasColumnName("Nome_Editor");

                    b.Property<string>("Telefone")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodPais");

                    b.HasIndex(new[] { "NomeEditor" }, "AK_Editor")
                        .IsUnique();

                    b.ToTable("Editor");
                });

            modelBuilder.Entity("Web20.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("Web20.Models.MuseuEditor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdEditor")
                        .HasColumnType("int")
                        .HasColumnName("Id_Editor");

                    b.Property<int>("IdMuseu")
                        .HasColumnType("int")
                        .HasColumnName("Id_Museu");

                    b.HasKey("Id");

                    b.HasIndex("IdEditor");

                    b.HasIndex("IdMuseu");

                    b.ToTable("Museu_Editor");
                });

            modelBuilder.Entity("Web20.Models.PaisEditor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CodContinente")
                        .HasColumnType("int")
                        .HasColumnName("Cod_Continente");

                    b.Property<string>("NomePais")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Nome_Pais");

                    b.HasKey("Id");

                    b.HasIndex("CodContinente");

                    b.ToTable("Pais_Editor");
                });

            modelBuilder.Entity("Web20.Models.Periodicidade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("TipoPeriodicidade")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tipo_Periodicidade");

                    b.HasKey("Id");

                    b.ToTable("Periodicidade");
                });

            modelBuilder.Entity("Web20.Models.PreferenciaEditor", b =>
                {
                    b.Property<int>("CodPublicacao")
                        .HasColumnType("int")
                        .HasColumnName("Cod_publicacao");

                    b.Property<int>("CodEditor")
                        .HasColumnType("int")
                        .HasColumnName("Cod_Editor");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("CodPublicacao", "CodEditor")
                        .HasName("PK__Preferen__7E9492BB1D286EF4");

                    b.HasIndex("CodEditor");

                    b.ToTable("Preferencia_Editor");
                });

            modelBuilder.Entity("Web20.Models.RevMuseu", b =>
                {
                    b.Property<int?>("Aleph")
                        .HasColumnType("int");

                    b.Property<int?>("CdPeriodicidade")
                        .HasColumnType("int")
                        .HasColumnName("cd_Periodicidade");

                    b.Property<string>("Ibict")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IBICT");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Issn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ISSN");

                    b.Property<string>("Titulo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.ToView("Rev_Museu");
                });

            modelBuilder.Entity("Web20.Models.RevistaMuseu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Aleph")
                        .HasColumnType("int");

                    b.Property<int?>("CdPeriodicidade")
                        .HasColumnType("int")
                        .HasColumnName("cd_Periodicidade");

                    b.Property<string>("Ibict")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IBICT");

                    b.Property<string>("Issn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ISSN");

                    b.Property<string>("Titulo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Revista_Museu");
                });

            modelBuilder.Entity("Web20.Models.Revistum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Aleph")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int?>("CdAquisicao")
                        .HasColumnType("int")
                        .HasColumnName("cd_Aquisicao");

                    b.Property<int?>("CdEditor")
                        .HasColumnType("int")
                        .HasColumnName("cd_Editor");

                    b.Property<int?>("CdPeriodicidade")
                        .HasColumnType("int")
                        .HasColumnName("cd_Periodicidade");

                    b.Property<DateTime?>("Chegada")
                        .HasColumnType("date");

                    b.Property<string>("Ibict")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IBICT");

                    b.Property<string>("Issn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ISSN");

                    b.Property<string>("Titulo")
                        .HasMaxLength(750)
                        .IsUnicode(false)
                        .HasColumnType("varchar(750)");

                    b.HasKey("Id");

                    b.HasIndex("CdAquisicao");

                    b.HasIndex("CdEditor");

                    b.HasIndex("CdPeriodicidade");

                    b.HasIndex(new[] { "Issn" }, "UQ__Revista__447D3E9665F5288E")
                        .IsUnique()
                        .HasFilter("[ISSN] IS NOT NULL");

                    b.HasIndex(new[] { "Issn" }, "UQ__Revista__447D3E966BA65F1F")
                        .IsUnique()
                        .HasFilter("[ISSN] IS NOT NULL");

                    b.HasIndex(new[] { "Aleph" }, "UQ__Revista__77BBC3442CC80D46")
                        .IsUnique()
                        .HasFilter("[Aleph] IS NOT NULL");

                    b.HasIndex(new[] { "Aleph" }, "UQ__Revista__77BBC344F33880D5")
                        .IsUnique()
                        .HasFilter("[Aleph] IS NOT NULL");

                    b.HasIndex(new[] { "Titulo" }, "UQ__Revista__7B406B5625EF3194")
                        .IsUnique()
                        .HasFilter("[Titulo] IS NOT NULL");

                    b.HasIndex(new[] { "Ibict" }, "UQ__Revista__8D98C9B9524AE8D9")
                        .IsUnique()
                        .HasFilter("[IBICT] IS NOT NULL");

                    b.HasIndex(new[] { "Ibict" }, "UQ__Revista__8D98C9B9BDB348D1")
                        .IsUnique()
                        .HasFilter("[IBICT] IS NOT NULL");

                    b.ToTable("Revista");
                });

            modelBuilder.Entity("Web20.Models.View", b =>
                {
                    b.Property<string>("Aleph")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Chegada")
                        .HasColumnType("date");

                    b.Property<string>("Ibict")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IBICT");

                    b.Property<string>("Issn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ISSN");

                    b.Property<string>("NomeEditor")
                        .IsRequired()
                        .HasMaxLength(700)
                        .IsUnicode(false)
                        .HasColumnType("varchar(700)")
                        .HasColumnName("Nome_Editor");

                    b.Property<string>("TipoAquisicao")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tipo_Aquisicao");

                    b.Property<string>("TipoPeriodicidade")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tipo_Periodicidade");

                    b.Property<string>("Titulo")
                        .HasMaxLength(750)
                        .IsUnicode(false)
                        .HasColumnType("varchar(750)");

                    b.ToView("View");
                });

            modelBuilder.Entity("Web20.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Web20.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Web20.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Web20.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web20.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Web20.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web20.Models.AspNetUserRole", b =>
                {
                    b.HasOne("Web20.Models.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web20.Models.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web20.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Web20.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web20.Models.Editor", b =>
                {
                    b.HasOne("Web20.Models.PaisEditor", "CodPaisNavigation")
                        .WithMany("Editors")
                        .HasForeignKey("CodPais")
                        .HasConstraintName("fk_pais_Editor");

                    b.Navigation("CodPaisNavigation");
                });

            modelBuilder.Entity("Web20.Models.MuseuEditor", b =>
                {
                    b.HasOne("Web20.Models.Editor", "IdEditorNavigation")
                        .WithMany("MuseuEditors")
                        .HasForeignKey("IdEditor")
                        .HasConstraintName("FK_Editor_Museu_Editor ")
                        .IsRequired();

                    b.HasOne("Web20.Models.RevistaMuseu", "IdMuseuNavigation")
                        .WithMany("MuseuEditors")
                        .HasForeignKey("IdMuseu")
                        .HasConstraintName("FK_Editor_Editor_Museu ")
                        .IsRequired();

                    b.Navigation("IdEditorNavigation");

                    b.Navigation("IdMuseuNavigation");
                });

            modelBuilder.Entity("Web20.Models.PaisEditor", b =>
                {
                    b.HasOne("Web20.Models.ContinenteEditor", "CodContinenteNavigation")
                        .WithMany("PaisEditors")
                        .HasForeignKey("CodContinente")
                        .HasConstraintName("fk_cpm_Editor");

                    b.Navigation("CodContinenteNavigation");
                });

            modelBuilder.Entity("Web20.Models.PreferenciaEditor", b =>
                {
                    b.HasOne("Web20.Models.Editor", "CodEditorNavigation")
                        .WithMany("PreferenciaEditors")
                        .HasForeignKey("CodEditor")
                        .HasConstraintName("fk_cod_Editor")
                        .IsRequired();

                    b.Navigation("CodEditorNavigation");
                });

            modelBuilder.Entity("Web20.Models.Revistum", b =>
                {
                    b.HasOne("Web20.Models.Aquisicao", "CdAquisicaoNavigation")
                        .WithMany("Revista")
                        .HasForeignKey("CdAquisicao")
                        .HasConstraintName("fk_cod_Aquisicao_Revista");

                    b.HasOne("Web20.Models.Editor", "CdEditorNavigation")
                        .WithMany("Revista")
                        .HasForeignKey("CdEditor")
                        .HasConstraintName("fk_cod_Editor_Revista");

                    b.HasOne("Web20.Models.Periodicidade", "CdPeriodicidadeNavigation")
                        .WithMany("Revista")
                        .HasForeignKey("CdPeriodicidade")
                        .HasConstraintName("fk_cod_Periodicidade_Revista");

                    b.Navigation("CdAquisicaoNavigation");

                    b.Navigation("CdEditorNavigation");

                    b.Navigation("CdPeriodicidadeNavigation");
                });

            modelBuilder.Entity("Web20.Models.Aquisicao", b =>
                {
                    b.Navigation("Revista");
                });

            modelBuilder.Entity("Web20.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("Web20.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("Web20.Models.ContinenteEditor", b =>
                {
                    b.Navigation("PaisEditors");
                });

            modelBuilder.Entity("Web20.Models.Editor", b =>
                {
                    b.Navigation("MuseuEditors");

                    b.Navigation("PreferenciaEditors");

                    b.Navigation("Revista");
                });

            modelBuilder.Entity("Web20.Models.PaisEditor", b =>
                {
                    b.Navigation("Editors");
                });

            modelBuilder.Entity("Web20.Models.Periodicidade", b =>
                {
                    b.Navigation("Revista");
                });

            modelBuilder.Entity("Web20.Models.RevistaMuseu", b =>
                {
                    b.Navigation("MuseuEditors");
                });
#pragma warning restore 612, 618
        }
    }
}
